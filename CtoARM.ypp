/* Yakk for Project of CS631
Author: W. Duncan Fraser
Email: duncan@wduncanfraser.com
Date: 20150322

*/

%{
	#include <iostream>
    #include <string>
    #include "CtoARM.h"
	extern int yylex(void);
	void yyerror(const char *s);
%}


%union {
    std::string *string;
    int i;
    int token;
    Node *node;
    NStatementBlock *stmts;
    NStatement *stmt;
    NCondition *cond;
    NExpression *expr;
    NVarDec *vardec;
    NVarAss *varass;
    NId *ident;
}

%token <i> INT
%token <string> ID
%token <token> TINT TVOID

%token IF ELSE WHILE DO FOR RETURN
//Terminal Symbols
%token <token> SEMI LPAREN RPAREN LBRACE RBRACE
%token <token> AND OR XOR ASSIGN PLUS MINUS MUL DIV MOD
%token <token> INC DEC
%token <token> CMPEQ

//Types for nonterminals
%type <stmts> stmts
%type <stmt> stmt
%type <cond> cond
%type <expr> expr
%type <vardec> var_dec
%type <varass> var_ass
%type <token> type

//Operator precedence for mathematical operators
%right ASSIGN
%left OR
%left XOR
%left AND
%left PLUS MINUS
%left MUL DIV MOD
%left INC DEC

%start program

%%

program :                       { } /* blank program */
 	    |   funcs               { }
 	    ;

funcs   :   func                { }
        |   funcs func          { }
        ;

func    :   type ID LPAREN RPAREN LBRACE stmts RBRACE   { $6->CodeGen(); }
        ;

type    :   TINT                 { }
        |   TVOID                { }
        ;

stmts   :   stmt                { $$ = new NStatementBlock(); $$->stmtlist.push_back($<stmt>1); }
        |   stmts stmt          { $1->stmtlist.push_back($<stmt>2); }
        ;

stmt    :   IF LPAREN cond RPAREN LBRACE stmts RBRACE       { $$ = new NFlowControl(IF, *$3, *$6); }
        |   WHILE LPAREN cond RPAREN LBRACE stmts RBRACE    { $$ = new NFlowControl(WHILE, *$3, *$6); }
        |   expr SEMI           { $$ = $1; }
		|	var_ass	SEMI	    { $$ = $1; }
		|	var_dec SEMI		{ $$ = $1; }
        |   RETURN expr SEMI    { $$ = new NReturn(*$2); }
        ;

cond    :   expr CMPEQ expr     { $$ = new NCondition(*$1, $2, *$3); }
        ;

expr    :   expr PLUS expr      { $$ = new NBinaryOperator(*$1, $2, *$3); }
		|	expr MINUS expr     { $$ = new NBinaryOperator(*$1, $2, *$3); }
		|	expr MUL expr     	{ $$ = new NBinaryOperator(*$1, $2, *$3); }
		|	expr DIV expr     	{ $$ = new NBinaryOperator(*$1, $2, *$3); }
		|   expr MOD expr       { $$ = new NBinaryOperator(*$1, $2, *$3); }
		|   expr AND expr       { $$ = new NBinaryOperator(*$1, $2, *$3); }
		|   expr OR expr        { $$ = new NBinaryOperator(*$1, $2, *$3); }
		|   expr XOR expr       { $$ = new NBinaryOperator(*$1, $2, *$3); }
		|   INC expr            { $$ = new NIncDecOperator($1, *$2) }
		|   DEC expr            { $$ = new NIncDecOperator($1, *$2) }
		|   LPAREN expr RPAREN  { $$ = $2; }
        |   INT                 { $$ = new NInteger($1); }
        |   ID                  { $$ = new NId($1->c_str()); delete $1; }
        ;

var_ass	:	ID ASSIGN expr		{ $$ = new NVarAss(*$1, *$3) }
		;

var_dec :	type ID 			{ $$ = new NVarDec(*$2, $1) }
		;
	
%%
int main(int argc, char **argv) {
	/* handles file input if no file is given defaults to stdin */
	std::string filename = "output/CtoARMOutput.s";
	extern FILE *yyin;
	for(int i = 1; i < argc; i++) {
		if(i + 1 != argc) {
			if(std::string(argv[i]) == "-o") {
				filename = argv[i+1];
				i+=2;
			}
			else {
				if(!(yyin = fopen(argv[i], "r"))) {
					yyerror(argv[i]);
					return 1;
				}
			}
		}
		else {
			if(!(yyin = fopen(argv[i], "r"))) {
				yyerror(argv[i]);
				return 1;
			}
		}
	}
	yyparse();

	writeFile(filename);
	return 0;
}