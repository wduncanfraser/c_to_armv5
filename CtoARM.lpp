/* Lex for Project of CS631
Author: W. Duncan Fraser
Email: duncan@wduncanfraser.com
Date: 20150421

*/
%option yylineno

%{
	#include <iostream>
	#include "CtoARM.h"
	#include "CtoARMtokens.h"
	void yyerror(const char *s)
    {
          printf("%s on line %d, %s\n", s, yylineno, yytext);
    }
    #define TOKEN(t) (yylval.token = t)
    extern "C" int yywrap() { }
%}


%s COMMENT
%%

"//".*\n			    { /* single line comment */}
"/*"				    { BEGIN COMMENT; /* multi line comment */}
<COMMENT>"*/"           { BEGIN INITIAL; }
<COMMENT>([^*]|\n)+|.
<COMMENT><<EOF>>        { yyerror("Unterminated comment\n"); return 0; }

"if"                    { return TOKEN(IF); }
"else"                  { return TOKEN(ELSE); }
"while"                 { return TOKEN(WHILE); }
"do"                    { return TOKEN(DO); }
"for"                   { return TOKEN(FOR); }
"return"                { return TOKEN(RETURN); }

"int"                   { return TOKEN(TINT); }
"void"                  { return TOKEN(TVOID); }

[a-zA-Z_][a-zA-Z0-9_]*  { yylval.string = new std::string(yytext, yyleng); return ID; }
[0-9]+                  { yylval.i = atoi(yytext); return INT; }

"=="                    { return TOKEN(CMPEQ); }

"++"                    { return TOKEN(INC); }
"--"                    { return TOKEN(DEC); }

";"                     { return TOKEN(SEMI); }
"("                     { return TOKEN(LPAREN); }
")"                     { return TOKEN(RPAREN); }
"{"                     { return TOKEN(LBRACE); }
"}"                     { return TOKEN(RBRACE); }
"^"                     { return TOKEN(XOR); }
"|"                     { return TOKEN(OR); }
"&"                     { return TOKEN(AND); }
"="                     { return TOKEN(ASSIGN); }
"+"                     { return TOKEN(PLUS); }
"-"                     { return TOKEN(MINUS); }
"*"                     { return TOKEN(MUL); }
"/"                     { return TOKEN(DIV); }
"%"                     { return TOKEN(MOD); }


[0-9]+\.[0-9]*          { yyerror("Floats not supported at this time"); return -1; }

[ \t\v\n\f]             { /* whitespace separates tokens */ }

.			            { yyerror("Syntax error: invalid token"); }


%%